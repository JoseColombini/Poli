/*
 * generated by Xtext 2.22.0
 */
package org.xtext.sisprog.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.sisprog.ide.contentassist.antlr.internal.InternalP2Parser;
import org.xtext.sisprog.services.P2GrammarAccess;

public class P2Parser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(P2GrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, P2GrammarAccess grammarAccess) {
			builder.put(grammarAccess.getComandoAccess().getAlternatives_0(), "rule__Comando__Alternatives_0");
			builder.put(grammarAccess.getExpressaoAccess().getAlternatives(), "rule__Expressao__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getOperacaoAccess().getAlternatives(), "rule__Operacao__Alternatives");
			builder.put(grammarAccess.getComparadorAccess().getAlternatives(), "rule__Comparador__Alternatives");
			builder.put(grammarAccess.getProgramaAccess().getGroup(), "rule__Programa__Group__0");
			builder.put(grammarAccess.getFuncaoAccess().getGroup(), "rule__Funcao__Group__0");
			builder.put(grammarAccess.getComandoAccess().getGroup(), "rule__Comando__Group__0");
			builder.put(grammarAccess.getDesvioCondicionalAccess().getGroup(), "rule__DesvioCondicional__Group__0");
			builder.put(grammarAccess.getDesvioCondicionalAccess().getGroup_7(), "rule__DesvioCondicional__Group_7__0");
			builder.put(grammarAccess.getComparacaoAccess().getGroup(), "rule__Comparacao__Group__0");
			builder.put(grammarAccess.getAtribuicaoAccess().getGroup(), "rule__Atribuicao__Group__0");
			builder.put(grammarAccess.getAritmeticoAccess().getGroup(), "rule__Aritmetico__Group__0");
			builder.put(grammarAccess.getAritmeticoAccess().getGroup_1(), "rule__Aritmetico__Group_1__0");
			builder.put(grammarAccess.getExpressaoAccess().getGroup_0(), "rule__Expressao__Group_0__0");
			builder.put(grammarAccess.getDesvioAccess().getGroup(), "rule__Desvio__Group__0");
			builder.put(grammarAccess.getValueAccess().getGroup_1(), "rule__Value__Group_1__0");
			builder.put(grammarAccess.getProgramaAccess().getFuncoesAssignment_0(), "rule__Programa__FuncoesAssignment_0");
			builder.put(grammarAccess.getFuncaoAccess().getNameAssignment_0(), "rule__Funcao__NameAssignment_0");
			builder.put(grammarAccess.getFuncaoAccess().getComandosAssignment_2(), "rule__Funcao__ComandosAssignment_2");
			builder.put(grammarAccess.getDesvioCondicionalAccess().getComparacaoAssignment_2(), "rule__DesvioCondicional__ComparacaoAssignment_2");
			builder.put(grammarAccess.getDesvioCondicionalAccess().getComandosAssignment_5(), "rule__DesvioCondicional__ComandosAssignment_5");
			builder.put(grammarAccess.getDesvioCondicionalAccess().getComandoAssignment_7_2(), "rule__DesvioCondicional__ComandoAssignment_7_2");
			builder.put(grammarAccess.getComparacaoAccess().getOp1Assignment_0(), "rule__Comparacao__Op1Assignment_0");
			builder.put(grammarAccess.getComparacaoAccess().getOprAssignment_1(), "rule__Comparacao__OprAssignment_1");
			builder.put(grammarAccess.getComparacaoAccess().getOp2Assignment_2(), "rule__Comparacao__Op2Assignment_2");
			builder.put(grammarAccess.getAtribuicaoAccess().getResAssignment_0(), "rule__Atribuicao__ResAssignment_0");
			builder.put(grammarAccess.getAtribuicaoAccess().getAtAssignment_2(), "rule__Atribuicao__AtAssignment_2");
			builder.put(grammarAccess.getAritmeticoAccess().getOp1Assignment_0(), "rule__Aritmetico__Op1Assignment_0");
			builder.put(grammarAccess.getAritmeticoAccess().getOprAssignment_1_0(), "rule__Aritmetico__OprAssignment_1_0");
			builder.put(grammarAccess.getAritmeticoAccess().getOp2Assignment_1_1(), "rule__Aritmetico__Op2Assignment_1_1");
			builder.put(grammarAccess.getDesvioAccess().getRotinaAssignment_1(), "rule__Desvio__RotinaAssignment_1");
			builder.put(grammarAccess.getVariavelAccess().getNameAssignment(), "rule__Variavel__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private P2GrammarAccess grammarAccess;

	@Override
	protected InternalP2Parser createParser() {
		InternalP2Parser result = new InternalP2Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public P2GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(P2GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}

/*
 * generated by Xtext 2.22.0
 */
package org.xtext.sisprog.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class P2GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sisprog.P2.Programa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuncoesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFuncoesFuncaoParserRuleCall_0_0 = (RuleCall)cFuncoesAssignment_0.eContents().get(0);
		private final Keyword cENDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Programa:
		//	funcoes+=Funcao+ 'END';
		@Override public ParserRule getRule() { return rule; }
		
		//funcoes+=Funcao+ 'END'
		public Group getGroup() { return cGroup; }
		
		//funcoes+=Funcao+
		public Assignment getFuncoesAssignment_0() { return cFuncoesAssignment_0; }
		
		//Funcao
		public RuleCall getFuncoesFuncaoParserRuleCall_0_0() { return cFuncoesFuncaoParserRuleCall_0_0; }
		
		//'END'
		public Keyword getENDKeyword_1() { return cENDKeyword_1; }
	}
	public class FuncaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sisprog.P2.Funcao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameRotuloParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComandosAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComandosComandoParserRuleCall_2_0 = (RuleCall)cComandosAssignment_2.eContents().get(0);
		
		//Funcao:
		//	name=Rotulo ':' comandos+=Comando+;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Rotulo ':' comandos+=Comando+
		public Group getGroup() { return cGroup; }
		
		//name=Rotulo
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Rotulo
		public RuleCall getNameRotuloParserRuleCall_0_0() { return cNameRotuloParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//comandos+=Comando+
		public Assignment getComandosAssignment_2() { return cComandosAssignment_2; }
		
		//Comando
		public RuleCall getComandosComandoParserRuleCall_2_0() { return cComandosComandoParserRuleCall_2_0; }
	}
	public class ComandoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sisprog.P2.Comando");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cAtribuicaoParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cDesvioParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cDesvioCondicionalParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Comando:
		//	(Atribuicao | Desvio | DesvioCondicional /*|Laco*/) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(Atribuicao | Desvio | DesvioCondicional /*|Laco*/) ';'
		public Group getGroup() { return cGroup; }
		
		//(Atribuicao | Desvio | DesvioCondicional /*|Laco*/)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Atribuicao
		public RuleCall getAtribuicaoParserRuleCall_0_0() { return cAtribuicaoParserRuleCall_0_0; }
		
		//Desvio
		public RuleCall getDesvioParserRuleCall_0_1() { return cDesvioParserRuleCall_0_1; }
		
		//DesvioCondicional
		public RuleCall getDesvioCondicionalParserRuleCall_0_2() { return cDesvioCondicionalParserRuleCall_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class DesvioCondicionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sisprog.P2.DesvioCondicional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComparacaoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComparacaoComparacaoParserRuleCall_2_0 = (RuleCall)cComparacaoAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cComandosAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComandosComandoParserRuleCall_5_0 = (RuleCall)cComandosAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cComandoAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cComandoComandoParserRuleCall_7_2_0 = (RuleCall)cComandoAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//DesvioCondicional:
		//	'if' '(' comparacao+=Comparacao+ ')' '{'
		//	comandos+=Comando+
		//	'}' ('else' '{' comando+=Comando+ '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' comparacao+=Comparacao+ ')' '{' comandos+=Comando+ '}' ('else' '{' comando+=Comando+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//comparacao+=Comparacao+
		public Assignment getComparacaoAssignment_2() { return cComparacaoAssignment_2; }
		
		//Comparacao
		public RuleCall getComparacaoComparacaoParserRuleCall_2_0() { return cComparacaoComparacaoParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//comandos+=Comando+
		public Assignment getComandosAssignment_5() { return cComandosAssignment_5; }
		
		//Comando
		public RuleCall getComandosComandoParserRuleCall_5_0() { return cComandosComandoParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//('else' '{' comando+=Comando+ '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'else'
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//comando+=Comando+
		public Assignment getComandoAssignment_7_2() { return cComandoAssignment_7_2; }
		
		//Comando
		public RuleCall getComandoComandoParserRuleCall_7_2_0() { return cComandoComandoParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}
	public class ComparacaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sisprog.P2.Comparacao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1ExpressaoParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Assignment cOprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOprComparadorParserRuleCall_1_0 = (RuleCall)cOprAssignment_1.eContents().get(0);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2ExpressaoParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		
		//Comparacao:
		//	op1=Expressao opr+=comparador op2=Expressao;
		@Override public ParserRule getRule() { return rule; }
		
		//op1=Expressao opr+=comparador op2=Expressao
		public Group getGroup() { return cGroup; }
		
		//op1=Expressao
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }
		
		//Expressao
		public RuleCall getOp1ExpressaoParserRuleCall_0_0() { return cOp1ExpressaoParserRuleCall_0_0; }
		
		//opr+=comparador
		public Assignment getOprAssignment_1() { return cOprAssignment_1; }
		
		//comparador
		public RuleCall getOprComparadorParserRuleCall_1_0() { return cOprComparadorParserRuleCall_1_0; }
		
		//op2=Expressao
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }
		
		//Expressao
		public RuleCall getOp2ExpressaoParserRuleCall_2_0() { return cOp2ExpressaoParserRuleCall_2_0; }
	}
	public class AtribuicaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sisprog.P2.Atribuicao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResVariavelParserRuleCall_0_0 = (RuleCall)cResAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAtAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAtAritmeticoParserRuleCall_2_0 = (RuleCall)cAtAssignment_2.eContents().get(0);
		
		//Atribuicao:
		//	res=variavel '=' at=Aritmetico;
		@Override public ParserRule getRule() { return rule; }
		
		//res=variavel '=' at=Aritmetico
		public Group getGroup() { return cGroup; }
		
		//res=variavel
		public Assignment getResAssignment_0() { return cResAssignment_0; }
		
		//variavel
		public RuleCall getResVariavelParserRuleCall_0_0() { return cResVariavelParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//at=Aritmetico
		public Assignment getAtAssignment_2() { return cAtAssignment_2; }
		
		//Aritmetico
		public RuleCall getAtAritmeticoParserRuleCall_2_0() { return cAtAritmeticoParserRuleCall_2_0; }
	}
	public class AritmeticoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sisprog.P2.Aritmetico");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1ExpressaoParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOprAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOprOperacaoParserRuleCall_1_0_0 = (RuleCall)cOprAssignment_1_0.eContents().get(0);
		private final Assignment cOp2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOp2ExpressaoParserRuleCall_1_1_0 = (RuleCall)cOp2Assignment_1_1.eContents().get(0);
		
		//Aritmetico:
		//	op1=Expressao (opr+=Operacao op2+=Expressao)*;
		@Override public ParserRule getRule() { return rule; }
		
		//op1=Expressao (opr+=Operacao op2+=Expressao)*
		public Group getGroup() { return cGroup; }
		
		//op1=Expressao
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }
		
		//Expressao
		public RuleCall getOp1ExpressaoParserRuleCall_0_0() { return cOp1ExpressaoParserRuleCall_0_0; }
		
		//(opr+=Operacao op2+=Expressao)*
		public Group getGroup_1() { return cGroup_1; }
		
		//opr+=Operacao
		public Assignment getOprAssignment_1_0() { return cOprAssignment_1_0; }
		
		//Operacao
		public RuleCall getOprOperacaoParserRuleCall_1_0_0() { return cOprOperacaoParserRuleCall_1_0_0; }
		
		//op2+=Expressao
		public Assignment getOp2Assignment_1_1() { return cOp2Assignment_1_1; }
		
		//Expressao
		public RuleCall getOp2ExpressaoParserRuleCall_1_1_0() { return cOp2ExpressaoParserRuleCall_1_1_0; }
	}
	public class ExpressaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sisprog.P2.Expressao");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cAritmeticoParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expressao:
		//	'(' Aritmetico ')' | Value;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Aritmetico ')' | Value
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Aritmetico ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Aritmetico
		public RuleCall getAritmeticoParserRuleCall_0_1() { return cAritmeticoParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//Value
		public RuleCall getValueParserRuleCall_1() { return cValueParserRuleCall_1; }
	}
	public class DesvioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sisprog.P2.Desvio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJumpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRotinaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRotinaFuncaoCrossReference_1_0 = (CrossReference)cRotinaAssignment_1.eContents().get(0);
		private final RuleCall cRotinaFuncaoIDTerminalRuleCall_1_0_1 = (RuleCall)cRotinaFuncaoCrossReference_1_0.eContents().get(1);
		
		//Desvio:
		//	'jump' rotina=[Funcao];
		@Override public ParserRule getRule() { return rule; }
		
		//'jump' rotina=[Funcao]
		public Group getGroup() { return cGroup; }
		
		//'jump'
		public Keyword getJumpKeyword_0() { return cJumpKeyword_0; }
		
		//rotina=[Funcao]
		public Assignment getRotinaAssignment_1() { return cRotinaAssignment_1; }
		
		//[Funcao]
		public CrossReference getRotinaFuncaoCrossReference_1_0() { return cRotinaFuncaoCrossReference_1_0; }
		
		//ID
		public RuleCall getRotinaFuncaoIDTerminalRuleCall_1_0_1() { return cRotinaFuncaoIDTerminalRuleCall_1_0_1; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sisprog.P2.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariavelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Value:
		//	variavel | {Value} INT;
		@Override public ParserRule getRule() { return rule; }
		
		//variavel | {Value} INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variavel
		public RuleCall getVariavelParserRuleCall_0() { return cVariavelParserRuleCall_0; }
		
		//{Value} INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{Value}
		public Action getValueAction_1_0() { return cValueAction_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class VariavelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sisprog.P2.variavel");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameRotuloParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//variavel:
		//	name=Rotulo;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Rotulo
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//Rotulo
		public RuleCall getNameRotuloParserRuleCall_0() { return cNameRotuloParserRuleCall_0; }
	}
	public class RotuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sisprog.P2.Rotulo");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Laco:
		////	'while' '('comparacao += Comparacao')''{'
		////		(comandos += Comando)
		////	'}'
		////	
		////;
		//Rotulo:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class OperacaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sisprog.P2.Operacao");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAsteriskAsteriskKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Operacao:
		//	'+' | '-' | '*' | '/' | '**';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '*' | '/' | '**'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword_4() { return cAsteriskAsteriskKeyword_4; }
	}
	public class ComparadorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sisprog.P2.comparador");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//comparador:
		//	'==' | '!=' | '<' | '>' | '<=' | '>=';
		@Override public ParserRule getRule() { return rule; }
		
		//'==' | '!=' | '<' | '>' | '<=' | '>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_4() { return cLessThanSignEqualsSignKeyword_4; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_5() { return cGreaterThanSignEqualsSignKeyword_5; }
	}
	
	
	private final ProgramaElements pPrograma;
	private final FuncaoElements pFuncao;
	private final ComandoElements pComando;
	private final DesvioCondicionalElements pDesvioCondicional;
	private final ComparacaoElements pComparacao;
	private final AtribuicaoElements pAtribuicao;
	private final AritmeticoElements pAritmetico;
	private final ExpressaoElements pExpressao;
	private final DesvioElements pDesvio;
	private final ValueElements pValue;
	private final VariavelElements pVariavel;
	private final RotuloElements pRotulo;
	private final OperacaoElements pOperacao;
	private final ComparadorElements pComparador;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public P2GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPrograma = new ProgramaElements();
		this.pFuncao = new FuncaoElements();
		this.pComando = new ComandoElements();
		this.pDesvioCondicional = new DesvioCondicionalElements();
		this.pComparacao = new ComparacaoElements();
		this.pAtribuicao = new AtribuicaoElements();
		this.pAritmetico = new AritmeticoElements();
		this.pExpressao = new ExpressaoElements();
		this.pDesvio = new DesvioElements();
		this.pValue = new ValueElements();
		this.pVariavel = new VariavelElements();
		this.pRotulo = new RotuloElements();
		this.pOperacao = new OperacaoElements();
		this.pComparador = new ComparadorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.sisprog.P2".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Programa:
	//	funcoes+=Funcao+ 'END';
	public ProgramaElements getProgramaAccess() {
		return pPrograma;
	}
	
	public ParserRule getProgramaRule() {
		return getProgramaAccess().getRule();
	}
	
	//Funcao:
	//	name=Rotulo ':' comandos+=Comando+;
	public FuncaoElements getFuncaoAccess() {
		return pFuncao;
	}
	
	public ParserRule getFuncaoRule() {
		return getFuncaoAccess().getRule();
	}
	
	//Comando:
	//	(Atribuicao | Desvio | DesvioCondicional /*|Laco*/) ';';
	public ComandoElements getComandoAccess() {
		return pComando;
	}
	
	public ParserRule getComandoRule() {
		return getComandoAccess().getRule();
	}
	
	//DesvioCondicional:
	//	'if' '(' comparacao+=Comparacao+ ')' '{'
	//	comandos+=Comando+
	//	'}' ('else' '{' comando+=Comando+ '}')?;
	public DesvioCondicionalElements getDesvioCondicionalAccess() {
		return pDesvioCondicional;
	}
	
	public ParserRule getDesvioCondicionalRule() {
		return getDesvioCondicionalAccess().getRule();
	}
	
	//Comparacao:
	//	op1=Expressao opr+=comparador op2=Expressao;
	public ComparacaoElements getComparacaoAccess() {
		return pComparacao;
	}
	
	public ParserRule getComparacaoRule() {
		return getComparacaoAccess().getRule();
	}
	
	//Atribuicao:
	//	res=variavel '=' at=Aritmetico;
	public AtribuicaoElements getAtribuicaoAccess() {
		return pAtribuicao;
	}
	
	public ParserRule getAtribuicaoRule() {
		return getAtribuicaoAccess().getRule();
	}
	
	//Aritmetico:
	//	op1=Expressao (opr+=Operacao op2+=Expressao)*;
	public AritmeticoElements getAritmeticoAccess() {
		return pAritmetico;
	}
	
	public ParserRule getAritmeticoRule() {
		return getAritmeticoAccess().getRule();
	}
	
	//Expressao:
	//	'(' Aritmetico ')' | Value;
	public ExpressaoElements getExpressaoAccess() {
		return pExpressao;
	}
	
	public ParserRule getExpressaoRule() {
		return getExpressaoAccess().getRule();
	}
	
	//Desvio:
	//	'jump' rotina=[Funcao];
	public DesvioElements getDesvioAccess() {
		return pDesvio;
	}
	
	public ParserRule getDesvioRule() {
		return getDesvioAccess().getRule();
	}
	
	//Value:
	//	variavel | {Value} INT;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//variavel:
	//	name=Rotulo;
	public VariavelElements getVariavelAccess() {
		return pVariavel;
	}
	
	public ParserRule getVariavelRule() {
		return getVariavelAccess().getRule();
	}
	
	////Laco:
	////	'while' '('comparacao += Comparacao')''{'
	////		(comandos += Comando)
	////	'}'
	////	
	////;
	//Rotulo:
	//	ID;
	public RotuloElements getRotuloAccess() {
		return pRotulo;
	}
	
	public ParserRule getRotuloRule() {
		return getRotuloAccess().getRule();
	}
	
	//Operacao:
	//	'+' | '-' | '*' | '/' | '**';
	public OperacaoElements getOperacaoAccess() {
		return pOperacao;
	}
	
	public ParserRule getOperacaoRule() {
		return getOperacaoAccess().getRule();
	}
	
	//comparador:
	//	'==' | '!=' | '<' | '>' | '<=' | '>=';
	public ComparadorElements getComparadorAccess() {
		return pComparador;
	}
	
	public ParserRule getComparadorRule() {
		return getComparadorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

/*
 * generated by Xtext 2.22.0
 */
package org.xtext.sisprog.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.sisprog.p2.Aritmetico;
import org.xtext.sisprog.p2.Atribuicao;
import org.xtext.sisprog.p2.Comparacao;
import org.xtext.sisprog.p2.Desvio;
import org.xtext.sisprog.p2.DesvioCondicional;
import org.xtext.sisprog.p2.Funcao;
import org.xtext.sisprog.p2.P2Package;
import org.xtext.sisprog.p2.Programa;
import org.xtext.sisprog.p2.Value;
import org.xtext.sisprog.p2.variavel;
import org.xtext.sisprog.services.P2GrammarAccess;

@SuppressWarnings("all")
public class P2SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private P2GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == P2Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case P2Package.ARITMETICO:
				sequence_Aritmetico(context, (Aritmetico) semanticObject); 
				return; 
			case P2Package.ATRIBUICAO:
				sequence_Atribuicao(context, (Atribuicao) semanticObject); 
				return; 
			case P2Package.COMPARACAO:
				sequence_Comparacao(context, (Comparacao) semanticObject); 
				return; 
			case P2Package.DESVIO:
				sequence_Desvio(context, (Desvio) semanticObject); 
				return; 
			case P2Package.DESVIO_CONDICIONAL:
				sequence_DesvioCondicional(context, (DesvioCondicional) semanticObject); 
				return; 
			case P2Package.FUNCAO:
				sequence_Funcao(context, (Funcao) semanticObject); 
				return; 
			case P2Package.PROGRAMA:
				sequence_Programa(context, (Programa) semanticObject); 
				return; 
			case P2Package.VALUE:
				sequence_Value(context, (Value) semanticObject); 
				return; 
			case P2Package.VARIAVEL:
				sequence_variavel(context, (variavel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Aritmetico returns Aritmetico
	 *     Expressao returns Aritmetico
	 *
	 * Constraint:
	 *     (op1=Expressao (opr+=Operacao op2+=Expressao)*)
	 */
	protected void sequence_Aritmetico(ISerializationContext context, Aritmetico semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comando returns Atribuicao
	 *     Atribuicao returns Atribuicao
	 *
	 * Constraint:
	 *     (res=variavel at=Aritmetico)
	 */
	protected void sequence_Atribuicao(ISerializationContext context, Atribuicao semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, P2Package.Literals.ATRIBUICAO__RES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, P2Package.Literals.ATRIBUICAO__RES));
			if (transientValues.isValueTransient(semanticObject, P2Package.Literals.ATRIBUICAO__AT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, P2Package.Literals.ATRIBUICAO__AT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtribuicaoAccess().getResVariavelParserRuleCall_0_0(), semanticObject.getRes());
		feeder.accept(grammarAccess.getAtribuicaoAccess().getAtAritmeticoParserRuleCall_2_0(), semanticObject.getAt());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Comparacao returns Comparacao
	 *
	 * Constraint:
	 *     (op1=Expressao opr+=comparador op2=Expressao)
	 */
	protected void sequence_Comparacao(ISerializationContext context, Comparacao semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comando returns DesvioCondicional
	 *     DesvioCondicional returns DesvioCondicional
	 *
	 * Constraint:
	 *     (comparacao+=Comparacao+ comandos+=Comando+ comando+=Comando*)
	 */
	protected void sequence_DesvioCondicional(ISerializationContext context, DesvioCondicional semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comando returns Desvio
	 *     Desvio returns Desvio
	 *
	 * Constraint:
	 *     rotina=[Funcao|ID]
	 */
	protected void sequence_Desvio(ISerializationContext context, Desvio semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, P2Package.Literals.DESVIO__ROTINA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, P2Package.Literals.DESVIO__ROTINA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDesvioAccess().getRotinaFuncaoIDTerminalRuleCall_1_0_1(), semanticObject.eGet(P2Package.Literals.DESVIO__ROTINA, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Funcao returns Funcao
	 *
	 * Constraint:
	 *     (name=Rotulo comandos+=Comando+)
	 */
	protected void sequence_Funcao(ISerializationContext context, Funcao semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Programa returns Programa
	 *
	 * Constraint:
	 *     funcoes+=Funcao+
	 */
	protected void sequence_Programa(ISerializationContext context, Programa semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expressao returns Value
	 *     Value returns Value
	 *
	 * Constraint:
	 *     {Value}
	 */
	protected void sequence_Value(ISerializationContext context, Value semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expressao returns variavel
	 *     Value returns variavel
	 *     variavel returns variavel
	 *
	 * Constraint:
	 *     name=Rotulo
	 */
	protected void sequence_variavel(ISerializationContext context, variavel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, P2Package.Literals.VARIAVEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, P2Package.Literals.VARIAVEL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariavelAccess().getNameRotuloParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
